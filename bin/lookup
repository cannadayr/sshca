#!/bin/bash

basedir="/root/sshca"

if [ ! -z "$SSHCA_BASEDIR" ]; then
    basedir="$SSHCA_BASEDIR"
fi

bindir="$basedir/bin"
cachedir="$basedir/cache"
confdir="$basedir/conf"

. "$confdir/sshca.conf"

_zero=$0
if [ ! -z "$SSHCA_CALLING_CMD" ]; then
    _zero="$SSHCA_CALLING_CMD"
fi
 
if [ -z "$2" ]; then
    echo "usage: $_zero cert { contents | details | fingerprint | history | id | key | origin | path | serial } { fingerprint | serial } <value>"
    echo "       $_zero key { certs | contents | fingerprint | history | ids | path } { file | fingerprint | serial | stdin } [ <value> ]"
    echo "       $_zero id { certs | history | keys | path } <id>"
    echo "       $_zero event { certs | contents | ids | keys | path } <fingerprint>"
    echo "       $_zero revocation { all | id <value> | key <fingerprint> | type { user | host } }"
    exit 1
fi

getprefix() { 
    echo $(echo $1 | cut -b1-2)/$(echo $1 | cut -b3-4)
}

type=$1
attr=$2
idtype=$3
id=""

case $type in

    cert)
        case $idtype in
            serial) id=$("$bindir/serial2fp" $4);;
            fingerprint) id=$(echo -n $4 | sed s/://g);;
            *) echo "error: invalid ID type '$idtype'"; exit 2;;
        esac

        prefix=$(getprefix $id)
        certdir="$cachedir/certs/$prefix/$id"

        if [ ! -d "$certdir" ]; then
            echo "error: certificate not found '$id'"
            exit 3
        fi

        case $attr in
            contents) cat "$certdir/contents";;
            details) ssh-keygen -Lf "$certdir/contents";;
            fingerprint) echo "$fingerprint_algorithm $(basename $certdir | "$bindir/fp" | "$bindir/nicefp")";;
            history) "$bindir/history" cert "$id";;
            id)
                id=$(basename $(readlink "$certdir/id"))
                idprefix=$(getprefix $id)
                echo $id $(cat "$cachedir/ids/$idprefix/$id/contents")
                ;;
            key) echo $(basename $(readlink "$certdir/key"));;
            origin) cat "$certdir/origin";;
            path) echo "$certdir/contents";;
            serial) cat "$certdir/serial";;
            *) echo "error: invalid attribute '$attr'"; exit 2;;
        esac
        ;;

    key)
        case $idtype in
            file)
                file=$4
                if [ ! -f "$file" ]; then
                    echo "error: pubkey file doesn't exist '$file'"
                    exit 2
                fi
                id=$(cat "$file" | "$bindir/keydata" | "$bindir/fp")
                ;;
            fingerprint)
                id=$(echo -n $4 | sed s/://g)
                ;;
            serial)
                certid=$("$bindir/serial2fp" $4)
                prefix=$(getprefix $certid)
                id=$(basename $(readlink "$cachedir/certs/$prefix/$certid/key"))
                ;;
            stdin)
                id=$(cat /dev/stdin | "$bindir/keydata" | "$bindir/fp")
                ;;
            *) echo "error: invalid ID type '$idtype'"; exit 2;;
        esac

        prefix=$(getprefix $id)
        keydir="$cachedir/keys/$prefix/$id"

        if [ ! -d "$keydir" ]; then
            echo "error: key not found '$id'"
            exit 3;
        fi

        case $attr in
            certs) ls -1 "$keydir/certs";;
            contents) cat "$keydir/contents";;
            fingerprint) echo "$fingerprint_algorithm $(cat $keydir/contents | "$bindir/keydata" | "$bindir/fp" | "$bindir/nicefp")";;
            history) "$bindir/history" key "$id";;
            ids) 
                for id in $(ls -1 "$keydir/ids"); do
                    idprefix=$(getprefix $id)
                    idname=$(cat "$cachedir/ids/$idprefix/$id/contents")
                    echo "$id $idname"
                done
                ;;
            path) echo "$keydir";;
            *) echo "error: invalid attribute '$attr'"; exit 2;;
        esac
        ;;

    id)
        id=$3
        idfp=$(echo -n $id | "$bindir/fp")
        prefix=$(getprefix $idfp)
        iddir="$cachedir/ids/$prefix/$idfp"

        if [ ! -d "$iddir" ]; then
            echo "error: id not found '$id'"
            exit 3
        fi

        case $attr in
            certs) ls -1 "$iddir/certs";;
            history) "$bindir/history" id $idfp;;
            keys) ls -1 "$iddir/keys";;
            path) echo "$iddir";;
            *) echo "error: invalid attribute '$attr'"; exit 2;;
        esac
        ;;

    event)
        eventfp=$3
        prefix=$(getprefix $eventfp)
        eventdir="$cachedir/events/$prefix/$eventfp"

        if [ ! -d "$eventdir" ]; then
            echo "error: event not found '$eventdir'"
            exit 3
        fi

        case $attr in
            certs) basename $(ls -1 "$eventdir/certs");;
            contents) cat "$eventdir/contents";;
            keys) basename $(ls -1 "$eventdir/keys");;
            ids) basename $(ls -1 "$eventdir/ids");;
            path) echo $eventdir;;
            *) echo "error: invalid attribute '$attr'"; exit 2;;
        esac
        ;;

    revocation)
        id=$3
        objlist=""

        # just exit if no certificates have been revoked
        if [ ! -d "$cachedir/revoked" ]; then
            exit
        fi

        case $attr in
            all)
                objlist="$(cd "$cachedir"; ls -1rt revoked/*/*)"
                ;;
            id)
                idfp=$(echo -n $id | "$bindir/fp")
                prefix=$(getprefix $idfp)
                idlist=$(cd "$cachedir"; ls -1rt revoked/*/*)
                for fp in "$idlist"; do
                    pfx=$(getprefix $fp)
                    if [ -d "$cachedir/ids/$pfx/$fp" ]; then
                        objlist="$objlist $fp"
                    fi
                done
                ;;
            key)
                keyfp=$(echo -n $id | "$bindir/fp")
                prefix=$(getprefix $keyfp)
                keylist=$(cd "$cachedir"; ls -1rt revoked/*/*)
                for fp in "$keylist"; do
                    pfx=$(getprefix $fp)
                    if [ -d "$cachedir/keys/$pfx/$fp" ]; then
                        objlist="$objlist $fp"
                    fi
                done
                ;;
            type)
                typelist=$(cd "$cachedir"; ls -1rt revoked/*/*)
                for fp in "$typelist"; do
                    pfx=$(getprefix $fp)
                    if [ -h "$cachedir/indexes/${id}_objects/$pfx/$fp" ]; then
                        objlist="$objlist $fp"
                    fi
                done
                ;;
        esac

        for fp in $objlist; do
            echo $fp
        done
        ;;

    *)
        echo "error: invalid lookup type '$type'"
        exit 2
        ;;
esac

