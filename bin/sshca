#!/bin/bash

bindir=$(dirname $0)
libdir=$(dirname $bindir)

basedir=$($bindir/basedir 2>/dev/null)
if [ -z "$basedir" ]; then
    basedir=$(dirname $bindir)
fi
export basedir

confdir="$basedir/conf"
conf="$confdir/sshca.conf"

if [ ! -z "$SSHCA_CONF" ]; then
    conf="$SSHCA_CONF"
else
    SSHCA_CONF=$conf
fi
export SSHCA_CONF

if [ -f "$conf" ]; then
    . "$conf"
fi

if [ -z "$1" ]; then
    echo "usage: $_zero command [ args ]"
    exit 1
fi

command=$1
shift

# set calling command for sub commands
export SSHCA_CALLING_CMD="$0 $command"

case $command in

    audit)
        if [ -z "$2" ]; then
            echo "usage: $0 { id <id> | key <key_fingerprint> }"
        fi

        type=$1
        id=$2
        case $type in
            id)
                "$bindir/lookup" id path $id > /dev/null 2>&1
                if [ $? = 3 ]; then
                    echo "error: key ID not found '$id'"
                    exit 3
                fi

                echo -e "Key ID: $id\n"

                keys=$($bindir/lookup id keys $id)
                numkeys=$(echo $keys | wc -l)
                echo "Found $(echo $numkeys) related public key(s):"
                for key in $keys; do
                    comment=$($bindir/lookup key contents fingerprint $key | cut -d' '  -f3)
                    echo "  <$fingerprint_algorithm $(echo $key | $bindir/nicefp)> $comment"
                done

                certs=$($bindir/lookup id certs $id)
                numcerts=$(echo $certs | wc -l)
                echo -e "\nFound $(echo $numcerts) related certificate(s):"
                for cert in $certs; do
                    serial=$($bindir/lookup cert serial fingerprint $cert)
                    echo "  <$fingerprint_algorithm $(echo $cert | $bindir/nicefp)> Serial $serial"
                done

                echo

                $bindir/history id $(basename $($bindir/lookup id path $id))
                ;;

            key)
                "$bindir/lookup" key path fingerprint $id > /dev/null 2>&1
                if [ $? = 3 ]; then
                    echo "error: public key not found '$id'"
                    exit 3
                fi

                fp=$(echo $id | sed 's/://g')
                nicefp=$(echo $fp | $bindir/nicefp)
                comment=$($bindir/lookup key contents fingerprint $fp | cut -d' ' -f3)
                echo -e "Public key: <$fingerprint_algorithm $nicefp> $comment\n"

                ids=$($bindir/lookup key ids fingerprint $fp | cut -d' ' -f2)
                numids=$(echo $ids | wc -l)
                echo "Found $(echo $numids) related key ID(s):"
                for id in $ids; do
                    echo "  $id"
                done

                certs=$($bindir/lookup key certs fingerprint $fp)
                numcerts=$(echo certs | wc -l)
                echo -e "\nFound $(echo $numcerts) related certificate(s):"
                for cert in $certs; do
                    serial=$($bindir/lookup cert serial fingerprint $cert)
                    echo "  <$fingerprint_algorithm $(echo $cert | $bindir/nicefp)> Serial $serial"
                done

                echo

                $bindir/history key $fp
                ;;

            *)
                echo "error: invalid type specified '$type'"
                exit 2
                ;;
        esac
        ;;

    issue)
        if [ -z "$1" ]; then
            echo "usage $0 <profile> [ options ]"
            exit 1
        fi 

        profile=$1
        shift

        # check profile exists
        if [ ! -f "$confdir/profiles/$profile.conf" ]; then
            echo "error: profile doesn't exist '$profile'"
            exit 2
        fi

        . "$confdir/profiles/$profile.conf"

        # check for valid certificate type
        if [ -z "$cert_type" ]; then
            echo "error: profile '$profile': no certificate type defined ('cert_type')"
            exit 3
        elif [ ! "$cert_type" = "host" -a ! "$cert_type" = "user" ]; then
            echo "error: profile '$profile': invalid certificate type ('cert_type') specified, must be 'host' or 'user'"
            exit 3
        fi

        opts="$cert_type"
        for opt in id principals validity opt_clear opt_force_cmd opt_agent_fwd opt_port_fwd opt_pty opt_user_rc opt_x11_fwd opt_src_addr pubkey; do
            optval=$(eval "echo \$$opt")
            if [ ! -z "$optval" ]; then
                opts="$opts $opt=$optval"
            fi
        done

        opts="$opts $@"
        "$bindir/issue" $opts

        rtncode=$?
        if [ $rtncode -ne 0 ]; then
            echo "failed to issue certificate: command returned code $rtncode"
            exit $rtncode
        fi
        ;;

    renew)
        if [ -z "$1" ]; then
            $bindir/renew
        fi

        $bindir/renew $@

        rtncode=$?
        if [ $? -ne 0 ]; then
            echo "failed to renew certificate: command returned code $rtncode"
            exit $rtncode
        fi
        ;;

    lookup)
        if [ -z "$1" ]; then
            $bindir/lookup
        fi

        $bindir/lookup $@
        ;;

    history)
        args=$@
        if [ -z "$1" ]; then
            args="all"
        fi

        $bindir/history $args
        ;;

    revoke)
        if [ -z "$1" ]; then
            $bindir/revoke
        fi

        $bindir/revoke $@
        ;;

    setup)
        $bindir/setup
        ;;

    init)
        if [ -z "$1" ]; then
            echo "usage: $0 init <dir>"
            exit
        fi

        dir=$1
        if [ ! -d "$1" ]; then
            mkdir $dir
        fi

        mkdir -p $dir/ca $dir/cache $dir/conf/profiles

        export basedir="$(pwd)/$dir"
        export SSHCA_CONF="$basedir/conf/sshca.conf"

        cat <<EOF > $dir/conf/sshca.conf
# SSHCA general config
basedir="$basedir"
bindir="$bindir"
cachedir="$basedir/cache"
confdir="$basedir/conf"
EOF

        cp "$libdir/conf/host.conf" "$libdir/conf/user.conf" "$basedir/conf"
        cp "$libdir/conf/profiles/"* "$basedir/conf/profiles/"

        cd $dir
        $0 setup
        ;;

    *)
        echo "error: invalid command '$command'"
        exit 2
        ;;

esac
